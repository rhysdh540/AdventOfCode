//file:noinspection GrDeprecatedAPIUsage
allprojects {
    apply plugin: 'java'
    sourceSets.main.java {
        srcDir 'src'
    }
}

subprojects {
    project.ext.year = project.name.substring(4)
    dependencies {
        implementation(rootProject)
    }

    tasks.register('run', JavaExec) {
		group = 'aoc'
        classpath = sourceSets.main.runtimeClasspath
        mainClass = 'Main'
        argsString = project.ext.year
        workingDir = rootDir
        jvmArgs = '-Xmx8G -Xms8G -XX:+UnlockExperimentalVMOptions -XX:+UnlockDiagnosticVMOptions -XX:+AlwaysActAsServerClassMachine -XX:+AlwaysPreTouch -XX:+DisableExplicitGC -XX:+UseNUMA -XX:NmethodSweepActivity=1 -XX:ReservedCodeCacheSize=400M -XX:NonNMethodCodeHeapSize=12M -XX:ProfiledCodeHeapSize=194M -XX:NonProfiledCodeHeapSize=194M -XX:-DontCompileHugeMethods -XX:MaxNodeLimit=240000 -XX:NodeLimitFudgeFactor=8000 -XX:+UseVectorCmov -XX:+PerfDisableSharedMem -XX:+UseFastUnorderedTimeStamps -XX:+UseCriticalJavaThreadPriority -XX:AllocatePrefetchStyle=3 -XX:+UseZGC -XX:AllocatePrefetchStyle=1 -XX:-ZProactive'.split(' ').toList()
    }

    tasks.register('initDay') {
		group = 'aoc'
        doLast {
            def day = null
			for(def i = 1; i <= 25; i++) {
				if(!project.file("src/Day${i}.java").exists()) {
					day = i
					break
				}
			}
			if(day == null) {
				throw new IllegalStateException("All days are already implemented!")
			}
            def source = project.file("src/Day${day}.java")
			source.parentFile.mkdirs()
			source.createNewFile()
			source.write("""import java.util.List;

/**
* <a href="https://adventofcode.com/${project.ext.year}/day/${day}">Day ${day}</a>
*/
public class Day${day} extends Day.IntDay {
	@Override
	public int run1Int(List<String> input) {

	}

	@Override
	public int run2Int(List<String> input) {
		throw new UnsupportedOperationException();
	}
}
			""".stripIndent())
			project.file("input/${day}.txt").createNewFile()
        }
    }
}
